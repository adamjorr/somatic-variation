r = rbind(r, ml)
write.table(r, file.path(outdir, "best_trees.tsv"), quote=FALSE, sep='\t', col.names = NA)
r = data.frame(path.distance = true.pds, parsimony.score = scores[best], p.value = unlist(pvals), tree = write.tree(best.trees), type = "maximum parsimony")
r$tree = as.character(r$tree)
r$type = as.character(r$type)
ml = c(ml.pd, NA, ml.pval, write.tree(ml.tree), "maximum likelihood")
r = rbind(r, ml)
write.table(r, file.path(outdir, "best_trees.tsv"), quote=FALSE, sep='\t', col.names = NA)
library(phangorn)
library(phytools)
library(ggplot2)
library(reshape2)
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
bl.meters = "~/Documents/github/somatic-variation/variant_analyses/distances_em1.csv"
iqtree = "~/Documents/github/somatic-variation/variant_analyses/iqtree" # mac version by default
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis2_compare_brlens/"
dir.create(outdir)
genome.size = 500000000
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
true.tree.physical = read.tree(true.tree)
true.tree.physical = unroot(true.tree.physical)
true.tree.parsimony = acctran(true.tree.physical, EM1)
system(paste("cp", alignment, file.path(outdir, "aln_0gaps.fa"))) # copy alignment
system(paste("cp", true.tree, outdir)) # copy tree
command = paste(iqtree, "-s", file.path(outdir, "aln_0gaps.fa"), "-redo -m K2P -g ", true.tree, sep=" ")
system(command)
ml.tree.file = file.path(outdir, "aln_0gaps.fa.treefile")
true.tree.ml = read.tree(ml.tree.file)
true.tree.ml$edge.length = true.tree.ml$edge.length * length(as.character(EM1)[1,])
physical = data.frame(true.tree.physical$edge, 'physical' = true.tree.physical$edge.length)
parsimony = data.frame(true.tree.parsimony$edge, 'parsimony' = true.tree.parsimony$edge.length)
ml = data.frame(true.tree.ml$edge, 'ml' = true.tree.ml$edge.length)
edges = merge(physical, parsimony, by = c('X1', 'X2'))
edges$ml = NA
p = root(true.tree.parsimony, resolve.root = T, outgroup = "M1")
m = root(true.tree.ml, resolve.root = T, outgroup = "M1")
for(i in 1:14){
# i is the number in the X2 column of edges
# for each i, we need to figure out the edge in the ML tree
if(i %in% edges$X2){ # one branch (the root) isn't
p.tips = Descendants(p, i, type = "tips")
p.tips = p$tip.label[p.tips[[1]]]
print("new")
print(p.tips)
# now find the corresponding ML branch for this
for(k in 1:14){
m.tips = Descendants(m, k, type = "tips")
m.tips = m$tip.label[m.tips[[1]]]
if(length(setdiff(p.tips, m.tips)) + length(setdiff(m.tips, p.tips)) == 0){
print(m.tips)
# now k is the number in the X2 column of ml matrix
ml.edge.length = ml$ml[which(ml$X2 == k)]
edges$ml[which(edges$X2==i)] = ml.edge.length
break
}
}
}
}
bl = read.csv(bl.meters)
bl$physical = bl$distance_cm/100
bl = bl[,c('branch', 'physical')]
bl$branch = as.character(bl$branch)
new = c("B->E", bl$physical[which(bl$branch=="A->E")] + bl$physical[which(bl$branch=="A->B")])
bl = rbind(bl, new)
bl$physical = as.character(as.numeric(bl$physical))
edges$physical = as.character(edges$physical)
edges = merge(edges, bl, by.y='physical')
edges$physical = as.numeric(edges$physical)
edges = edges[,-c(2,3)]
edges.melt = melt(edges, id.vars = c("branch", "physical", "recovery.rate", "branch.type"))
head(edges)
library(phangorn)
library(phytools)
library(ggplot2)
library(reshape2)
# input files
# must exist prior to running this script
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
bl.meters = "~/Documents/github/somatic-variation/variant_analyses/distances_em1.csv"
detection = "~/Documents/github/somatic-variation/variant_analyses/analysis2_detection_rate/detection_rate_per_branch.tsv"
iqtree = "~/Documents/github/somatic-variation/variant_analyses/iqtree" # mac version by default
# make output directory
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis2_compare_brlens/"
dir.create(outdir)
# estimated diploid genome size for E. melliodora in bp
genome.size = 500000000
################ Analysis 3.1 #####################
# compare branch lengths of mutations vs. meters  #
# load the alignment
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
# load the physical tree structure
true.tree.physical = read.tree(true.tree)
# important to unroot it, because we have no way of polarising the lengths of the internal root
# branch for the molecular data
true.tree.physical = unroot(true.tree.physical)
# get parsimony branch lengths
true.tree.parsimony = acctran(true.tree.physical, EM1)
# run IQtree assuming the true tree, to get ML branch lenths
system(paste("cp", alignment, file.path(outdir, "aln_0gaps.fa"))) # copy alignment
system(paste("cp", true.tree, outdir)) # copy tree
command = paste(iqtree, "-s", file.path(outdir, "aln_0gaps.fa"), "-redo -m K2P -g ", true.tree, sep=" ")
system(command)
ml.tree.file = file.path(outdir, "aln_0gaps.fa.treefile")
true.tree.ml = read.tree(ml.tree.file)
# update edge lengths in ML tree to be substitutions, not substitutions per site
true.tree.ml$edge.length = true.tree.ml$edge.length * length(as.character(EM1)[1,])
# merge the physical and the parsimony, because these are on the same tree
physical = data.frame(true.tree.physical$edge, 'physical' = true.tree.physical$edge.length)
parsimony = data.frame(true.tree.parsimony$edge, 'parsimony' = true.tree.parsimony$edge.length)
ml = data.frame(true.tree.ml$edge, 'ml' = true.tree.ml$edge.length)
edges = merge(physical, parsimony, by = c('X1', 'X2'))
edges$ml = NA
p = root(true.tree.parsimony, resolve.root = T, outgroup = "M1")
m = root(true.tree.ml, resolve.root = T, outgroup = "M1")
# a long-winded way to match up branch lengths
for(i in 1:14){
# i is the number in the X2 column of edges
# for each i, we need to figure out the edge in the ML tree
if(i %in% edges$X2){ # one branch (the root) isn't
p.tips = Descendants(p, i, type = "tips")
p.tips = p$tip.label[p.tips[[1]]]
print("new")
print(p.tips)
# now find the corresponding ML branch for this
for(k in 1:14){
m.tips = Descendants(m, k, type = "tips")
m.tips = m$tip.label[m.tips[[1]]]
if(length(setdiff(p.tips, m.tips)) + length(setdiff(m.tips, p.tips)) == 0){
print(m.tips)
# now k is the number in the X2 column of ml matrix
ml.edge.length = ml$ml[which(ml$X2 == k)]
edges$ml[which(edges$X2==i)] = ml.edge.length
break
}
}
}
}
edges
ggplot(edges, aes(x = physical, y = parsimony)) + geom_point()
ggplot(edges, aes(x = physical, y = ml)) + geom_point()
ggplot(edges, aes(x = physical, y = ml)) + geom_point() + geom_smooth()
ggplot(edges, aes(x = physical, y = ml)) + geom_point() + geom_line()
ggplot(edges, aes(x = physical, y = ml)) + geom_point() + geom_smooth(method = 'lm')
summary(lm(edges$physical ~ edges$parsimony))
summary(lm(edges$physical ~ edges$parsimony -1))
summary(lm(edges$physical ~ edges$ml -1))
summary(lm(edges$physical ~ edges$ml))
summary(lm(edges$physical ~ edges$ml -1 ))
bl = read.csv(bl.meters)
bl$physical = bl$distance_cm/100
bl = bl[,c('branch', 'physical')]
bl$branch = as.character(bl$branch)
new = c("B->E", bl$physical[which(bl$branch=="A->E")] + bl$physical[which(bl$branch=="A->B")])
bl = rbind(bl, new)
bl$physical = as.character(as.numeric(bl$physical))
edges$physical = as.character(edges$physical)
edges = merge(edges, bl, by.y='physical')
edges$physical = as.numeric(edges$physical)
edges = edges[,-c(2,3)]
dr = read.delim(detection, stringsAsFactors = F)
newdr = c("B->E",
dr$recovered[which(dr$branch=="A->E")] + dr$recovered[which(dr$branch=="A->B")],
dr$not.recovered[which(dr$branch=="A->E")] + dr$not.recovered[which(dr$branch=="A->B")],
NA,
'internal')
dr = rbind(dr, newdr)
dr$recovered = as.numeric(dr$recovered)
dr$not.recovered = as.numeric(dr$not.recovered)
dr$recovery.rate = dr$recovered / (dr$recovered + dr$not.recovered)
dr = dr[-c(2,3)]
edges = merge(edges, dr, by = 'branch')
edges$parsimony.corrected = edges$parsimony / edges$recovery.rate
edges$ml.corrected = edges$ml / edges$recovery.rate
edges.melt = melt(edges, id.vars = c("branch", "physical", "recovery.rate", "branch.type"))
ggplot(edges.melt, aes(x = physical, y = value)) +
geom_smooth(method='lm') +
geom_point(aes(colour = branch.type), size = 3) +
facet_wrap(~variable, scales = "free_y") +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)")
summary(lm(edges$physical ~ edges$parsimony -1))
summary(lm(edges$physical ~ edges$parsimony))
summary(lm(edges$physical ~ edges$parsimony.corrected -1))
summary(lm(edges$physical ~ edges$parsimony.corrected))
summary(lm(edges$physical ~ edges$ml -1))
summary(lm(edges$physical ~ edges$ml))
summary(lm(edges$physical ~ edges$ml.corrected -1))
summary(lm(edges$physical ~ edges$ml.corrected))
library(phangorn)
library(phytools)
library(ggplot2)
library(reshape2)
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
bl.meters = "~/Documents/github/somatic-variation/variant_analyses/distances_em1.csv"
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis2_compare_brlens/"
dir.create(outdir)
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
true.tree.physical = read.tree(true.tree)
true.tree.physical = unroot(true.tree.physical)
true.tree.parsimony = acctran(true.tree.physical, EM1)
physical = data.frame(true.tree.physical$edge, 'physical' = true.tree.physical$edge.length)
parsimony = data.frame(true.tree.parsimony$edge, 'parsimony' = true.tree.parsimony$edge.length)
edges = merge(physical, parsimony, by = c('X1', 'X2'))
edges
bl = read.csv(bl.meters)
bl
edges
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm', formula = y~x-1) +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)")
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm', formula = y~x-1) +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15)) + ylim(c(0,15))
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
summary(lm(edges$physical ~ edges$parsimony -1))
?acctran()
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
outfile = file.path(outdir, "output.txt")
outcon = file(outfile)
outcon = file(outfile)
writeLines(s, outcon)
s = summary(lm(edges$physical ~ edges$parsimony -1))
outfile = file.path(outdir, "output.txt")
outcon = file(outfile)
writeLines(s, outcon)
close(outcon)
s
print(s)
writeLines(print(s), outcon)
writeLines(cat(s), outcon)
writeLines(as.character(s), outcon)
outcon = file(outfile)
writeLines(as.character(s), outcon)
close(outcon)
s
writeLines(s, outcon)
outcon = file(outfile)
writeLines(s, outcon)
s = summary(lm(edges$physical ~ edges$parsimony -1))
sink(file.path(outdir, "output.txt"))
print(s)
sink()
library(phangorn)
library(phytools)
library(ggplot2)
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis1_positive_control/"
dir.create(outdir)
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
iqtree = "~/Documents/github/somatic-variation/variant_analyses/iqtree" # mac version by default
system(paste("cp", alignment, file.path(outdir, "aln_0gaps.fa")))
EM1 = read.phyDat(file.path(outdir, "aln_0gaps.fa"), format="fasta", type="DNA")
trees = allTrees(8, tip.label = c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8"))
scores = lapply(trees, parsimony, EM1)
scores = unlist(scores)
best = which(scores == min(scores))
best.trees = trees[best]
true.tree = read.tree(true.tree)
all.pds = path.dist(trees, true.tree)
all.pds = sort(all.pds)
true.pds = path.dist(best.trees, true.tree)
get_p = function(pd, all.pds){
return(max(which(all.pds==pd))/length(all.pds))
}
pvals = lapply(true.pds, get_p, all.pds = all.pds)
ml.tree.file = file.path(outdir, "aln_0gaps.fa.treefile")
ml.tree = read.tree(ml.tree.file)
ml.pd = path.dist(ml.tree, true.tree)
ml.pval = get_p(ml.pd, all.pds)
five_percent = all.pds[as.integer(length(all.pds)*0.05)]
pd.df = data.frame(Path.Distance = all.pds)
p1 = ggplot(pd.df, aes(x = Path.Distance)) +
geom_histogram(bins = 50) +
geom_vline(xintercept = ml.pd, colour = 'blue', size = 1, alpha = 0.5) +
geom_vline(xintercept = true.pds, colour = 'red', linetype = 'dashed', size = 0.5) +
geom_vline(xintercept = five_percent, colour = 'red', size = 1, alpha = 0.5) +
xlab("Path distance of inferred tree from true tree") +
labs(title = "Positive control analysis")
pdf(file.path(outdir, "positive_control_figure.pdf"), width=7, height=5)
p1
dev.off()
r = data.frame(path.distance = true.pds, parsimony.score = scores[best], p.value = unlist(pvals), tree = write.tree(best.trees), type = "maximum parsimony")
r$tree = as.character(r$tree)
r$type = as.character(r$type)
ml = c(ml.pd, NA, ml.pval, write.tree(ml.tree), "maximum likelihood")
r = rbind(r, ml)
write.table(r, file.path(outdir, "best_trees.tsv"), quote=FALSE, sep='\t', col.names = NA)
ml.tree = root(ml.tree, outgroup = c('M5', 'M6', 'M7', 'M8'), resolve.root = TRUE)
plot(ml.tree)
obj<-cophylo(ml.tree, true.tree)
plot(obj, lwd=3)
association <- cbind(true.tree$tip.label, true.tree$tip.label)
cophyloplot(true.tree, ml.tree, assoc=association, length.line=4, space=28, gap=3)
obj<-cophylo(ml.tree, true.tree)
plot(obj, lwd=3)
association <- cbind(true.tree$tip.label, true.tree$tip.label)
cophyloplot(true.tree, ml.tree, assoc=association, length.line=4, space=28, gap=3)
plot(obj, lwd=3)
?cophyloplot
cophyloplot(true.tree, ml.tree, assoc=association, length.line=4, space=28, gap=3, use.edge.length = F)
cophyloplot(true.tree, ml.tree, assoc=association, length.line=4, space=28, gap=3, use.edge.length = F, rotate = T)
cophyloplot(true.tree, ml.tree, assoc=association, length.line=2, space=28, gap=3, use.edge.length = F, rotate = T)
cophyloplot(true.tree, ml.tree, assoc=association, length.line=4, space=28, gap=3, use.edge.length = F, rotate = T)
library(phangorn)
library(phytools)
library(ggplot2)
library(reshape2)
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
bl.meters = "~/Documents/github/somatic-variation/variant_analyses/distances_em1.csv"
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis2_compare_brlens/"
dir.create(outdir)
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
true.tree.physical = read.tree(true.tree)
true.tree.physical = unroot(true.tree.physical)
true.tree.parsimony = acctran(true.tree.physical, EM1)
physical = data.frame(true.tree.physical$edge, 'physical' = true.tree.physical$edge.length)
parsimony = data.frame(true.tree.parsimony$edge, 'parsimony' = true.tree.parsimony$edge.length)
sum(true.tree.physical$edge.length)
library(adephylo)
distRoot(true.tree.physical)
plot(true.tree.physical)
true.tree.physical = read.tree(true.tree)
true.tree.physical = read.tree(true.tree)
distRoot(true.tree.physical)
plot(true.tree.physical)
mean(distRoot(true.tree.physical))
?binom.test()
binom.test(4, 100)
binom.test(4, 100, alternative = "less", conf.level = 0.05)
binom.test(4, 100, alternative = "less", p = 0.05)
library(phangorn)
library(phytools)
install.packages(c("phangorn", "phytools"))
library(phangorn)
library(phytools)
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/"
dir.create(outdir)
original = "~/Documents//github/somatic-variation/results/filtered_bed_excluded_no_s.fa"
system(paste("cp", original, "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa"))
original = "~/Documents//github/somatic-variation/results/filtered_bed_excluded.fa"
system(paste("cp", original, "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa"))
system("sed -i '' 's/N/-/g' ~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa")
system("sed -i '' 's/a/''/g' ~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa")
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa"
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
aln0 = phyDat(del.colgapsonly(EM1,  threshold = 1/8))
aln0f = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
write.phyDat(aln0, file = aln0f, format = "fasta")
library(phangorn)
library(phytools)
library(ggplot2)
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis1_positive_control/"
dir.create(outdir)
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
iqtree = "~/Documents/github/somatic-variation/variant_analyses/iqtree" # mac version by default
system(paste("cp", alignment, file.path(outdir, "aln_0gaps.fa")))
EM1 = read.phyDat(file.path(outdir, "aln_0gaps.fa"), format="fasta", type="DNA")
trees = allTrees(8, tip.label = c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8"))
scores = lapply(trees, parsimony, EM1)
scores = unlist(scores)
best = which(scores == min(scores))
best.trees = trees[best]
best.trees
true.tree = read.tree(true.tree)
all.pds = path.dist(trees, true.tree)
all.pds = sort(all.pds)
true.pds = path.dist(best.trees, true.tree)
get_p = function(pd, all.pds){
return(max(which(all.pds==pd))/length(all.pds))
}
pvals = lapply(true.pds, get_p, all.pds = all.pds)
command = paste(iqtree, "-s", file.path(outdir, "aln_0gaps.fa"), "-b 1000 -safe -redo -m JC", sep=" ")
system(command)
ml.tree.file = file.path(outdir, "aln_0gaps.fa.treefile")
ml.tree = read.tree(ml.tree.file)
ml.pd = path.dist(ml.tree, true.tree)
ml.pval = get_p(ml.pd, all.pds)
five_percent = all.pds[as.integer(length(all.pds)*0.05)]
pd.df = data.frame(Path.Distance = all.pds)
p1 = ggplot(pd.df, aes(x = Path.Distance)) +
geom_histogram(bins = 50) +
geom_vline(xintercept = ml.pd, colour = 'blue', size = 1, alpha = 0.5) +
geom_vline(xintercept = true.pds, colour = 'red', linetype = 'dashed', size = 0.5) +
geom_vline(xintercept = five_percent, colour = 'red', size = 1, alpha = 0.5) +
xlab("Path distance of inferred tree from true tree") +
labs(title = "Positive control analysis")
pdf(file.path(outdir, "positive_control_figure.pdf"), width=7, height=5)
p1
dev.off()
r = data.frame(path.distance = true.pds, parsimony.score = scores[best], p.value = unlist(pvals), tree = write.tree(best.trees), type = "maximum parsimony")
r$tree = as.character(r$tree)
r$type = as.character(r$type)
ml = c(ml.pd, NA, ml.pval, write.tree(ml.tree), "maximum likelihood")
r = rbind(r, ml)
write.table(r, file.path(outdir, "best_trees.tsv"), quote=FALSE, sep='\t', col.names = NA)
library(phangorn)
library(phytools)
library(ggplot2)
library(reshape2)
library(adephylo)
install.packages("adephylo")
alignment = "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/aln_0gaps.fa"
true.tree = "~/Documents/github/somatic-variation/variant_analyses/tree_em1_physical_structure.phy"
bl.meters = "~/Documents/github/somatic-variation/variant_analyses/distances_em1.csv"
outdir = "~/Documents/github/somatic-variation/variant_analyses/analysis2_compare_brlens/"
dir.create(outdir)
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
true.tree.physical = read.tree(true.tree)
true.tree.physical = unroot(true.tree.physical)
true.tree.parsimony = acctran(true.tree.physical, EM1)
physical = data.frame(true.tree.physical$edge, 'physical' = true.tree.physical$edge.length)
parsimony = data.frame(true.tree.parsimony$edge, 'parsimony' = true.tree.parsimony$edge.length)
edges = merge(physical, parsimony, by = c('X1', 'X2'))
p = root(true.tree.parsimony, resolve.root = T, outgroup = "M1")
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15)) + ylim(c(0, 25))
ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
s = summary(lm(edges$physical ~ edges$parsimony -1))
sink(file.path(outdir, "output.txt"))
print(s)
sink()
true.tree.physical = read.tree(true.tree)
mean(distRoot(true.tree.physical))
library(adephylo)
true.tree.physical = read.tree(true.tree)
mean(distRoot(true.tree.physical))
pdf(file.path(outdir, "brlen_correlation_figure.pdf"), width=7, height=5)
p2
p2 = ggplot(edges, aes(x = physical, y = parsimony)) +
geom_smooth(method='lm') +
geom_point(size = 3) +
xlab("physical branch length (M)") +
ylab("genetic branch length (mutations)") +
xlim(c(0, 15))
pdf(file.path(outdir, "brlen_correlation_figure.pdf"), width=7, height=5)
p2
dev.off()
s1 = summary(lm(edges$physical ~ edges$parsimony))
sink(file.path(outdir, "output.txt"))
print(s1)
sink()
sink(file.path(outdir, "output.txt"))
print(s)
print(s1)
sink()
true.tree.physical = read.tree(true.tree)
library(phangorn)
library(phytools)
outdir = "~/Documents/github/somatic-variation/positive_control_analyses/analysis0_alignments/"
dir.create(outdir)
original = "~/Documents//github/somatic-variation/results/filtered_bed_excluded.fa"
system(paste("cp", original, "~/Documents/github/somatic-variation/variant_analyses/analysis0_alignments/original.fa"))
library(phangorn)
library(phytools)
outdir = "~/Documents/github/somatic-variation/positive_control_analyses/analysis0_alignments/"
dir.create(outdir)
original = "~/Documents//github/somatic-variation/results/filtered_bed_excluded.fa"
system(paste("cp", original, file.path(outdir, "original.fa")))
system(paste("sed -i '' 's/N/-/g'", file.path(outdir, "original.fa")))
system(paste("sed -i '' 's/a/''/g'", file.path(outdir, "original.fa")))
alignment = file.path(outdir, "original.fa")
EM1 = read.phyDat(alignment, format="fasta", type="DNA")
aln0 = phyDat(del.colgapsonly(EM1,  threshold = 1/8))
aln0f = file.path(outdir, "aln_0gaps.fa")
write.phyDat(aln0, file = aln0f, format = "fasta")
